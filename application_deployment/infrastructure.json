{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Defines database infrastructure for ExpenseTracker.",
	"Parameters": {
		"VPC": {
			"Description": "Select the one and only default VPC",
			"Type": "AWS::EC2::VPC::Id"
		},
		"Subnet": {
			"Description": "Select one of the available subnets",
			"Type": "AWS::EC2::Subnet::Id"
		},
		"ApplicationSecurityGroup": {
			"Description": "Application server security group",
			"Type": "AWS::EC2::SecurityGroup::Id"
		},
		"InstanceType": {
			"Description": "Select one of the possible instance types",
			"Type": "String",
			"Default": "t2.micro",
			"AllowedValues": ["t2.micro", "t2.small", "t2.medium"]
		},
		"DBHost": {
			"Description": "Database host, with no port",
			"Type": "String",
			"Default": "temptemp",
			"NoEcho": true
		},
		"DBUser": {
			"Description": "Database user",
			"Type": "String",
			"Default": "temptemp",
			"NoEcho": true
		},
		"DBPassword": {
			"Description": "Database password",
			"Type": "String",
			"Default": "temptemp",
			"NoEcho": true
		},
		"KeyName": {
			"Description": "Key Pair name",
			"Type": "AWS::EC2::KeyPair::KeyName"
		}
	},
	"Resources": {
		"LBListener": {
			"Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [ {
					"TargetGroupArn": { "Ref": "LBTargetGroup" },
					"Type": "forward"
				}],
				"LoadBalancerArn": { "Ref": "LoadBalancer" },
				"Port": 80,
				"Protocol": "TCP"
			}
		},
		"LBTargetGroup": {
			"Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
			"Properties" : {
				"Name": "AppTargetGroup",
				"HealthCheckIntervalSeconds" : 10,
				"UnhealthyThresholdCount" : 2,
				"HealthyThresholdCount": 2,
				"Port" : 8080,
				"Protocol" : "TCP",
				"VpcId" : {"Ref": "VPC"}
			}
		},
		"LoadBalancer": {
			"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
			"Properties": {
				"Scheme": "internet-facing",
				"Subnets": [ {"Ref": "Subnet"} ],
				"Type": "network",
				"IpAddressType": "ipv4"
			}
		},
		"ASLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"AssociatePublicIpAddress": true,
				"EbsOptimized": false,
				"IamInstanceProfile": { "Ref": "ServerProfile" },
				"ImageId": "ami-4fffc834",
				"InstanceMonitoring": false,
				"InstanceType": {"Ref": "InstanceType"},
				"KeyName": {"Ref": "KeyName"},
				"SecurityGroups": [{"Ref": "ApplicationSecurityGroup"}],
				"UserData" : 
					{"Fn::Base64": {"Fn::Join": ["", [
						"#!/bin/bash -ex\n",
						"sudo yum -y --security update\n",
						"sudo yum install ruby wget -y\n",
						"cd /home/ec2-user\n",
						"wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install\n",
						"chmod +x ./install\n",
						"sudo ./install auto\n",
						"echo 'ok' > index.html\n",
						"sudo python -m SimpleHTTPServer 8080 &\n",
						"sudo yum -y install mysql\n",
						"sudo yum install -y awslogs\n",
						"echo '[general]' > awslogs.conf\n",
						"echo 'state_file = /var/lib/awslogs/agent-state\n' >> awslogs.conf\n",
						"echo '[/var/log/messages]' >> awslogs.conf\n",
						"echo 'file = /home/ec2-user/logs/*' >> awslogs.conf\n",
						"echo 'log_group_name = /var/log/messages' >> awslogs.conf\n",
						"echo 'log_stream_name = {instance_id}' >> awslogs.conf\n",
						"echo 'datetime_format = %b %d %H:%M:%S' >> awslogs.conf\n",
						"sudo cp awslogs.conf /etc/awslogs/awslogs.conf\n",
						"sudo service awslogs start\n",
						"echo 'export DBHost=", {"Ref": "DBHost"}, "' > set_env.sh\n",
						"echo 'export DBUser=", {"Ref": "DBUser"}, "' >> set_env.sh\n",
						"echo 'export DBPassword=", {"Ref": "DBPassword"}, "' >> set_env.sh\n",
						"chmod +x set_env.sh\n"
					]]}}
			}
		},
		"AutoScalingGroup": {
   			"Type" : "AWS::AutoScaling::AutoScalingGroup",
   			"Properties" : {
				"Cooldown" : "10",
				"DesiredCapacity": "1",
				"HealthCheckGracePeriod" : 60,
				"HealthCheckType" : "ELB",
				"LaunchConfigurationName": {"Ref": "ASLaunchConfig"},
				"MaxSize" : "3",
				"MinSize" : "0",
				"Tags": [{
					"Key": "Application",
					"Value": "ETApp",
					"PropagateAtLaunch" : true
				}],
				"TargetGroupARNs": [{ "Ref": "LBTargetGroup" }],
				"VPCZoneIdentifier" : [ {"Ref": "Subnet"} ]
			}
		},
		"S3Bucket": {
			"Type": "AWS::S3::Bucket"
		},
    	"DeploymentApplication": {
			"Type": "AWS::CodeDeploy::Application",
			"Properties": {
				"ApplicationName": "ETAppDeploy"
			}
		},
		"ServerProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
      			"Roles": [ { "Ref": "ServerRole" } ]
   			}
		},
		"ServerRole": {
    		"Type": "AWS::IAM::Role",
    		"Properties": {
            	"AssumeRolePolicyDocument": {
               		"Version" : "2012-10-17",
            		"Statement": [ {
                  		"Effect": "Allow",
						"Principal": {
                     		"Service": [ "ec2.amazonaws.com" ]
                  		},
                 		"Action": [ "sts:AssumeRole" ]
               		}]
            	},
            	"Path": "/",
            	"Policies": [ {
            		"PolicyName": "root",
            		"PolicyDocument": {
                		"Version" : "2012-10-17",
                		"Statement": [ {
							"Action": [
                				"s3:Get*",
                				"s3:List*"
				            ],
                    		"Effect": "Allow",
                    		"Resource": "*"
                		}]
               		}
            	},
            	{
            		"PolicyName": "root2",
            		"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [ {
							"Effect": "Allow",
							"Action": [
								"logs:CreateLogGroup",
								"logs:CreateLogStream",
								"logs:PutLogEvents",
								"logs:DescribeLogStreams"
							],
							"Resource": [
								"arn:aws:logs:*:*:*"
							]
						}]
					}
            	}]
        	}
    	},
		"CodeDeployRole": {
    		"Type": "AWS::IAM::Role",
    		"Properties": {
            	"AssumeRolePolicyDocument": {
               		"Version" : "2012-10-17",
            		"Statement": [ {
                  		"Effect": "Allow",
						"Principal": {
                     		"Service": [ "codedeploy.amazonaws.com" ]
                  		},
                 		"Action": [ "sts:AssumeRole" ]
               		}]
            	},
            	"Path": "/",
            	"Policies": [ {
            		"PolicyName": "root",
            		"PolicyDocument": {
                		"Version" : "2012-10-17",
                		"Statement": [ {
                    		"Effect": "Allow",
                    		"Action": "*",
                    		"Resource": "*"
                		}]
               		}
            	}]
        	}
    	},
    	"ServiceDashboard": {
			"Type": "AWS::CloudWatch::Dashboard",
			"Properties" : {
				"DashboardName": "ETD",
				"DashboardBody": "{\"widgets\": [{\"type\": \"text\",\"x\": 0,\"y\": 7,\"width\":3,\"height\":3,\"properties\":{\"markdown\":\"Hello world\"}}]}"
			}
		}
	},
	"Outputs": {
		"AppDeployBucket": {
			"Value": {"Ref": "S3Bucket"},
			"Description": "S3 bucket for deploying the application"
		},
		"LoadBalancerDNSName": {
			"Value": {"Fn::GetAtt": ["LoadBalancer", "DNSName"]},
			"Description": "Public DNS name of Load Balancer"
		},
		"AutoScalingGroup": {
			"Value": { "Ref": "AutoScalingGroup" },
			"Description": "Name of Auto Scaling Group"
		},
		"CodeDeployRole": {
			"Value": {"Fn::GetAtt": ["CodeDeployRole", "Arn"] },
			"Description": "CodeDeployRole ARN"
		},
		"LoadBalancerName": {
			"Value": {"Fn::GetAtt": ["LoadBalancer", "LoadBalancerName"]},
			"Description": "Name of Load Balancer"
		},
		"TargetGroupName": {
			"Value": {"Fn::GetAtt": ["LBTargetGroup", "TargetGroupFullName"]},
			"Description": "Name of Target Group"
		}
	}
}